
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package eu.x_road.emta_v6;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.logging.Logger;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import eu.x_road.emta_v6.XteeFieAndmedResponseType.FieJada;

/**
 * This class was generated by Apache CXF 3.2.0
 * 2020-02-15T00:35:05.856+02:00
 * Generated source version: 3.2.0
 * 
 */

@javax.jws.WebService(
                      serviceName = "webService",
                      portName = "port",
                      targetNamespace = "http://emta-v6.x-road.eu",
                      wsdlLocation = "classpath:services.wsdl",
                      endpointInterface = "eu.x_road.emta_v6.WebServiceInterface")
                      
public class PortImpl implements WebServiceInterface {
	
	
	private static String andmeFail = "fie.xml";
	//File.class.getResourceAsStream("MyFile.txt");
	
    private static final Logger LOG = Logger.getLogger(PortImpl.class.getName());
    
    
    /* (non-Javadoc)
     * @see eu.x_road.emta_v6.WebServiceInterface#xteeFieAndmed(eu.x_road.emta_v6.PersonalIdentityCode keha, eu.x_road.xsd.identifiers.XRoadClientIdentifierType client, eu.x_road.xsd.identifiers.XRoadServiceIdentifierType service, java.lang.String id, java.lang.String protocolVersion, java.lang.String userId, java.lang.String issue, eu.x_road.emta_v6.PersonalIdentityCode paring, eu.x_road.emta_v6.XteeFieAndmedResponseType keha2)*
     */
    public void xteeFieAndmed(eu.x_road.emta_v6.PersonalIdentityCode keha, javax.xml.ws.Holder<eu.x_road.xsd.identifiers.XRoadClientIdentifierType> client, javax.xml.ws.Holder<eu.x_road.xsd.identifiers.XRoadServiceIdentifierType> service, javax.xml.ws.Holder<java.lang.String> id, javax.xml.ws.Holder<java.lang.String> protocolVersion, javax.xml.ws.Holder<java.lang.String> userId, javax.xml.ws.Holder<java.lang.String> issue, javax.xml.ws.Holder<PersonalIdentityCode> paring, javax.xml.ws.Holder<XteeFieAndmedResponseType> keha2) { 
        LOG.info("Executing operation xteeFieAndmed");
        System.out.println(keha);
        System.out.println(client.value);
        System.out.println(service.value);
        System.out.println(id.value);
        System.out.println(protocolVersion.value);
        System.out.println(userId.value);
        System.out.println(issue.value);
        try {
            eu.x_road.emta_v6.PersonalIdentityCode paringValue = keha;
            paring.value = paringValue;
            eu.x_road.emta_v6.XteeFieAndmedResponseType keha2Value = valmistaVastus(keha);
            keha2.value = keha2Value;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

	public XteeFieAndmedResponseType valmistaVastus(PersonalIdentityCode keha) throws ParserConfigurationException, SAXException, IOException {
		//lisainfo alla on vıib programm lisada v‰‰rtuse krimKa kui andmetest selgub(tag <krimKa>), et isik on kriminaalkorras karistatud
		XteeFieAndmedResponseType vastus = new XteeFieAndmedResponseType();
		FieJada fied = new FieJada();
		boolean krimKa = false;
		int kokku;
		
		krimKa = lisaFiedXmlstJaKontrolliKrimKa(fied, keha);
		
		kokku = fied.getItem().size();
		if(krimKa) vastus.setLisainfo("K‰esolev isik on kriminaalkorras karistatud");
		if (kokku == 0) {
			vastus.setLisainfo("K‰esoleva isikukoodiga inimest FIE andmebaasis ei leidu");
		}
		else {
			vastus.setKokku(Integer.toString(kokku));
			vastus.setFieJada(fied);
		}
		
		return vastus;
	}

	public boolean lisaFiedXmlstJaKontrolliKrimKa(FieJada fied, PersonalIdentityCode keha) throws ParserConfigurationException, SAXException, IOException {
		NodeList nodes = loeXml();
		boolean krimKa = false;
        
        for(int n = 0 ; n < nodes.getLength() ; n++){
        	Node node = nodes.item(n);
        	
        	if(node.getNodeType() == Node.ELEMENT_NODE){
        		Element fie = (Element) node;
        		String isikukood = fie.getElementsByTagName("isikukood").item(0).getTextContent();
        		if(isikukood.equals(keha.getIsikukood())){
        			SelfEmployedPerson sep = new SelfEmployedPerson();
        			
        			sep.setIsikukood(isikukood);
        			sep.setAlgus(fie.getElementsByTagName("algus").item(0).getTextContent());
        			if(fie.getElementsByTagName("lopp").getLength() > 0) sep.setLopp(fie.getElementsByTagName("lopp").item(0).getTextContent());
        			
        			fied.getItem().add(sep);
        			if(fie.getElementsByTagName("krimKa").getLength() > 0 && fie.getElementsByTagName("krimKa").item(0).getTextContent().equals("true")) krimKa = true;
        			
        		}
        	}
        }
        
        return krimKa;
		
	}

	public NodeList loeXml() throws ParserConfigurationException, SAXException, IOException {
		//meetod loeb andmed xml failist mis asub resources kaustas ja sisaldab erinevate isikukoodidega FIEsid
        ClassLoader classLoader = new PortImpl().getClass().getClassLoader();
        File xml = new File(classLoader.getResource(andmeFail).getFile());
        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
        Document doc = dBuilder.parse(xml); 
        NodeList nodes = doc.getDocumentElement().getElementsByTagName("fie");
        
		return nodes;
	}

}
